generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  username  String   @unique
  fullname  String
  password  String
  birthdate DateTime @db.Date
  bio       String?  @db.Text
  role      Role     @default(USER)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  projects           Project[]
  partners           Partner[]
  projectDiscussions ProjectDiscussion[]
  partnerDiscussions PartnerDiscussion[]
  projectLikes       ProjectLike[]
  partnerLikes       PartnerLike[]
  userLinks          UserLink[]

  @@map("users")
}

model UserLink {
  id     String @id @default(uuid()) @db.Uuid
  url    String
  userId String @map("user_id") @db.Uuid

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_links")
}

model Project {
  id        String   @id @default(uuid()) @db.Uuid
  title     String
  content   String   @db.Text
  userId    String   @map("user_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  projectTags        ProjectTag[]
  projectDiscussions ProjectDiscussion[]
  projectLikes       ProjectLike[]
  projectImages      ProjectImage[]
  projectLinks       ProjectLink[]

  @@map("projects")
}

model ProjectTag {
  id        String @id @default(uuid()) @db.Uuid
  name      String
  projectId String @map("project_id") @db.Uuid

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_tags")
}

model ProjectImage {
  id        String @id @default(uuid()) @db.Uuid
  imageUrl  String @map("image_url")
  projectId String @db.Uuid

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_images")
}

model ProjectLink {
  id        String @id @default(uuid()) @db.Uuid
  url       String
  projectId String @map("project_id") @db.Uuid

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_links")
}

model ProjectLike {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String?  @db.Uuid
  projectId String   @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")

  user    User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@map("project_likes")
}

model Partner {
  id         String   @id @default(uuid()) @db.Uuid
  title      String
  content    String   @db.Text
  validUntil DateTime @map("valid_until")
  userId     String   @map("user_id") @db.Uuid
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  partnerTags        PartnerTag[]
  partnerDiscussions PartnerDiscussion[]
  partnerLikes       PartnerLike[]
  partnerLinks       PartnerLink[]

  @@map("partners")
}

model PartnerTag {
  id        String @id @default(uuid()) @db.Uuid
  name      String
  partnerId String @map("project_id") @db.Uuid

  partner Partner @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  @@map("partner_tags")
}

model PartnerLink {
  id        String @id @default(uuid()) @db.Uuid
  url       String
  partnerId String @map("partner_id") @db.Uuid

  partner Partner @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  @@map("partner_links")
}

model PartnerLike {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  partnerId String   @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")

  user    User    @relation(fields: [userId], references: [id])
  partner Partner @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  @@unique([userId, partnerId])
  @@map("partner_likes")
}

model ProjectDiscussion {
  id           String   @id @default(uuid()) @db.Uuid
  comment      String   @db.Text
  userId       String   @map("user_id") @db.Uuid
  projectId    String   @map("project_id") @db.Uuid
  discussionId String?  @map("discussion_id") @db.Uuid
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")

  user              User               @relation(fields: [userId], references: [id])
  project           Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectDiscussion ProjectDiscussion? @relation("project_discussions.discussion_id_TO_project_discussion", fields: [discussionId], references: [id], onDelete: Cascade)

  replies ProjectDiscussion[] @relation("project_discussions.discussion_id_TO_project_discussion")

  @@map("project_discussions")
}

model PartnerDiscussion {
  id           String   @id @default(uuid()) @db.Uuid
  comment      String   @db.Text
  userId       String   @map("user_id") @db.Uuid
  partnerId    String   @map("partner_id") @db.Uuid
  discussionId String?  @map("discussion_id") @db.Uuid
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")

  user              User               @relation(fields: [userId], references: [id])
  partner           Partner            @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  partnerDiscussion PartnerDiscussion? @relation("partner_discussions.discussion_id_TO_partner_discussion", fields: [discussionId], references: [id], onDelete: Cascade)

  replies PartnerDiscussion[] @relation("partner_discussions.discussion_id_TO_partner_discussion")

  @@map("partner_discussions")
}
